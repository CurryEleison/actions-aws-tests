Transform: AWS::Serverless-2016-10-31

Resources:
  ResourceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
  ResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Role:
        Fn::GetAtt:
        - ResourceFunctionRole
        - Arn
      Handler: index.handler
      Code:
        ZipFile: |
          from urllib.request import build_opener, HTTPHandler, Request
          import base64
          import boto3
          import http.client
          import json

          s3_client = boto3.client("s3")


          def sendResponse(event, context, status, message):
              bucket = event["ResourceProperties"].get("Target", {}).get("Bucket")
              key = event["ResourceProperties"].get("Target", {}).get("Key")

              body = json.dumps(
                  {
                      "Status": status,
                      "Reason": message,
                      "StackId": event["StackId"],
                      "RequestId": event["RequestId"],
                      "LogicalResourceId": event["LogicalResourceId"],
                      "PhysicalResourceId": f"s3://{bucket}/{key}",
                      "Data": {
                          "Bucket": bucket,
                          "Key": key,
                      },
                  }
              )

              request = Request(event["ResponseURL"], data=body.encode("utf-8"))
              request.add_header("Content-Type", "")
              request.add_header("Content-Length", len(body))
              request.get_method = lambda: "PUT"

              opener = build_opener(HTTPHandler)
              response = opener.open(request)


          def handler(event, context):
              print("Received request:", json.dumps(event, indent=4))

              request = event["RequestType"]
              properties = event["ResourceProperties"]

              if "Target" not in properties or all(
                  prop not in properties for prop in ["Body", "Base64Body", "Source"]
              ):
                  return sendResponse(event, context, "FAILED", "Missing required parameters")

              target = properties["Target"]

              if request in ("Create", "Update"):
                  if "Body" in properties:
                      target.update(
                          {
                              "Body": properties["Body"],
                          }
                      )

                      s3_client.put_object(**target)

                  elif "Base64Body" in properties:
                      try:
                          body = base64.b64decode(properties["Base64Body"])
                      except:
                          return sendResponse(event, context, "FAILED", "Malformed Base64Body")

                      target.update({"Body": body})

                      s3_client.put_object(**target)

                  elif "Source" in properties:
                      source = properties["Source"]

                      s3_client.copy_object(
                          CopySource=source,
                          Bucket=target["Bucket"],
                          Key=target["Key"],
                          MetadataDirective="COPY",
                          TaggingDirective="COPY",
                          ACL=target["ACL"],
                      )

                  else:
                      return sendResponse(event, context, "FAILED", "Malformed body")

                  return sendResponse(event, context, "SUCCESS", "Created")

              if request == "Delete":
                  s3_client.delete_object(
                      Bucket=target["Bucket"],
                      Key=target["Key"],
                  )

                  return sendResponse(event, context, "SUCCESS", "Deleted")

              return sendResponse(event, context, "FAILED", f"Unexpected: {request}")

  MacroFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - ResourceFunctionRole
        - Arn
      Handler: index.handler
      Environment:
        Variables:
          LAMBDA_ARN: !GetAtt ResourceFunction.Arn
      Code:
        ZipFile: |
          import boto3
          import os

          LAMBDA_ARN = os.environ["LAMBDA_ARN"]

          s3_client = boto3.client("s3")


          def handle_template(request_id, template):
              new_resources = {}

              for name, resource in list(template.get("Resources", {}).items()):
                  if resource["Type"] == "AWS::S3::Object":
                      props = resource["Properties"]

                      if (
                          len(
                              [
                                  prop
                                  for prop in resource["Properties"]
                                  if prop in ["Body", "Base64Body", "Source"]
                              ]
                          )
                          != 1
                      ):
                          raise Exception(
                              "You must specify exactly one of: Body, Base64Body, Source"
                          )

                      target = props["Target"]

                      if "ACL" not in target:
                          target["ACL"] = "private"

                      resource_props = {
                          "ServiceToken": LAMBDA_ARN,
                          "Target": target,
                      }

                      if "Body" in props:
                          resource_props["Body"] = props["Body"]

                      elif "Base64Body" in props:
                          resource_props["Base64Body"] = props["Base64Body"]

                      elif "Source" in props:
                          resource_props["Source"] = props["Source"]

                      new_resources[name] = {
                          "Type": "Custom::S3Object",
                          "Version": "1.0",
                          "Properties": resource_props,
                      }

              for name, resource in list(new_resources.items()):
                  template["Resources"][name] = resource

              return template


          def handler(event, context):
              try:
                  template = handle_template(event["requestId"], event["fragment"])
              except Exception as e:
                  return {
                      "requestId": event["requestId"],
                      "status": "failure",
                      "fragment": event["fragment"],
                  }

              return {
                  "requestId": event["requestId"],
                  "status": "success",
                  "fragment": template,
              }
          



  Macro:
    Type: AWS::CloudFormation::Macro
    Properties:
      Name: S3Objects
      FunctionName: !GetAtt MacroFunction.Arn

